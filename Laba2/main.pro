% Copyright

implement main
    open core, file, stdio

domains
    genre = военный; ужасы; драма; фантастика; фэнтези; комедия.

class facts - kino
    кинотеатр : (integer Id_КТ, string Название_Кинотеатра, string Адрес, string Телефон, integer Количество_мест).
    кинофильм : (integer Id_КФ, string Название_Кинофильма, integer Год, string Режисер, genre Жанр).
    показывают : (integer Id_КТ, integer Id_КФ, string Дата, string Время, integer Выручка).

class facts
    s : (real Sum) single.

clauses
    s(0).

class predicates
    адрес_кинотеатра : (string Название_Кинотеатра) nondeterm.
    кинотеатр_показывающий_фильм : (string Название_Кинофильма) nondeterm.
    адрес_и_название_кинотеатра_показывающего_фильм_определенного_жанра : (genre Жанр) nondeterm.
    выручка : (string Название_Кинофильма) nondeterm.

clauses
% Адрес кинотеатра
    адрес_кинотеатра(X) :-
        кинотеатр(_, X, A, _, _),
        write("Адрес: ", A, "\n"),
        nl,
        fail.
    адрес_кинотеатра(X) :-
        кинотеатр(_, X, _, _, _),
        write("\n"),
        nl.
% Кинотеатр, показывающий определенный фильм
    кинотеатр_показывающий_фильм(X) :-
        кинотеатр(N, Y, _, _, _),
        показывают(N, NF, _, _, _),
        кинофильм(NF, X, _, _, _),
        write("Кинотеатр: ", Y, "\n"),
        nl,
        fail.
    кинотеатр_показывающий_фильм(X) :-
        кинофильм(_, X, _, _, _),
        write("\n"),
        nl.

% Адрес и название кинотеатра, показывающего фильм определенного жанра
    адрес_и_название_кинотеатра_показывающего_фильм_определенного_жанра(X) :-
        кинотеатр(N, Y, J, _, _),
        показывают(N, NF, _, _, _),
        кинофильм(NF, _, _, _, X),
        write("Название кинотеатра: ", Y, "\n"),
        write("Адрес: ", J, "\n"),
        nl,
        fail.
    адрес_и_название_кинотеатра_показывающего_фильм_определенного_жанра(X) :-
        кинофильм(_, _, _, _, X),
        nl.

%выручка всех кинотеатров с определенного фильма
    выручка(X) :-
        кинотеатр(N, _, _, _, _),
        %assert(s(0)),
        показывают(N, NF, _, _, VR),
        s(Sum),
        кинофильм(NF, X, _, _, _),
        assert(s(Sum + VR)),
        fail.
    выручка(X) :-
        кинофильм(_, X, _, _, _),
        s(Sum),
        write("Выручка фильма:", Sum, "\n"),
        nl.
    выручка(X) :-
        кинофильм(_, X, _, _, _),
        write("\n"),
        nl.

    run() :-
        console::init(),
        reconsult("..\\film.txt", kino),
        write("Правило: Адрес кинотеатра\n"),
        адрес_кинотеатра("IMAX"),
        fail.

    run() :-
        console::init(),
        reconsult("..\\film.txt", kino),
        write("Правило: кинотеатр показывающий фильм\n"),
        кинотеатр_показывающий_фильм("Звездные войны: Эпизод IV – Новая надежда"),
        fail.

    run() :-
        console::init(),
        reconsult("..\\film.txt", kino),
        write("Правило: адрес и название кинотеатра показывающего фильм определенного жанра \n"),
        адрес_и_название_кинотеатра_показывающего_фильм_определенного_жанра(фэнтези),
        fail.
    run() :-
        console::init(),
        reconsult("..\\film.txt", kino),
        write("Правило: Выручка всех кинотеатров за определенный фильм\n "),
        выручка("Звездные войны: Эпизод IV – Новая надежда"),
        fail.
    run() :-
        succeed.

end implement main

goal
    console::run(main::run).
